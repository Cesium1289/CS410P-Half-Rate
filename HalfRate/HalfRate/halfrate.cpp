//NAME:Carson Hansen
//DATE: 4/20/2022
//PURPOSE: Create two sine waves and convert them into .wav files. This
//program will also play the same sound that is generated by 'clipped.wav'.
#include<iostream>
#include<math.h>
#include<fstream>
#include<string>
#include<SFML/Graphics.hpp>
#include<SFML/Audio.hpp>
using namespace std;
int main(int argc, char* argv[])
{
	
	sf::RenderWindow window(sf::VideoMode(800, 600), "Window");
	/*
	sf::SoundBuffer sineBuffer;
	sf::SoundBuffer clippedBuffer;
	vector<sf::Int16> clippedWave;
	vector<sf::Int16> sineWave;
	sf::Sound sound;
	cout << "-_-_-_-Sine-wave Summary-_-_-_-\n";
	cout << "Number of channels: " << sineBuffer.getChannelCount() << endl;
	cout << "Sample size: " << sineBuffer.getSampleCount() << endl;
	cout << "Duration (in seconds): " << sineBuffer.getDuration().asSeconds() << endl;
	cout << "Sample rate: " << sineBuffer.getSampleRate() << endl;

	//save content of each buffer to a file
	sineBuffer.saveToFile("sine.wav");
	clippedBuffer.saveToFile("clipped.wav");

	//play the clipped wave audio
	sound.setBuffer(clippedBuffer);
	sound.play();

	*/
	vector<sf::Int16> wave;
	string fileName;
	fileName = "sine";
	sf::SoundBuffer buffer;
	sf::Sound sound;
	
	//load the .wav into the buffer from file
	if (buffer.loadFromFile("gc.wav"))
	{
		sound.setBuffer(buffer);
		sound.play();
		cout << "-_-_-_-Sine-wave Summary-_-_-_-\n";
		cout << "Number of channels: " << buffer.getChannelCount() << endl;
		cout << "Sample size: " << buffer.getSampleCount() << endl;
		cout << "Duration (in seconds): " << buffer.getDuration().asSeconds() << endl;
		cout << "Sample rate: " << buffer.getSampleRate() << endl;
	}
	else
	{
		cout << "Exiting the program...\n";
		return 0;
	}

	

	/*
	//check that only 1 command line argument was passed
	if (argc != 2)
	{
		cout << "You must provide only two argument and the last must be a .wav file!\n";
		return 0;
	}
	else
		cout << "provided two arg\n";

	fileName = argv[0];

	//check that the arguement passed is a .wav file
	if (fileName.substr(fileName.find_last_of(".") + 1) != ".wav")
	{
		cout << "The file must be a .wave file!\n";
		return 0;
	}
	else
		cout << "provided .wav file\n";
		*/
	while (window.isOpen())
	{
		sf::Event event;

		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
		}
	}

}
